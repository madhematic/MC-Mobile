package com.capstone.maternalcare.ui.forgot

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.text.TextUtils
import android.view.View
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.datastore.core.DataStore
import androidx.datastore.preferences.core.Preferences
import androidx.datastore.preferences.preferencesDataStore
import androidx.lifecycle.ViewModelProvider
import com.capstone.maternalcare.R
import com.capstone.maternalcare.data.model.UserPreference
import com.capstone.maternalcare.databinding.ActivityForgotPasswordBinding
import com.capstone.maternalcare.ui.login.LoginActivity
import com.capstone.maternalcare.util.ResponseCallback
import com.capstone.maternalcare.util.ViewModelFactory


private val Context.dataStore: DataStore<Preferences> by preferencesDataStore(
    name = "settings"
)

class ForgotPasswordActivity : AppCompatActivity() {
    private lateinit var binding: ActivityForgotPasswordBinding
    private lateinit var viewModel: ForgotPasswordViewModel
    private lateinit var userEmail: String

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityForgotPasswordBinding.inflate(layoutInflater)
        setContentView(binding.root)

        setupView()
        setupViewModel()
        setupAction()
    }

    private fun setupView() {
        supportActionBar?.hide()
    }

    private fun setupViewModel() {
        viewModel = ViewModelProvider(
            this,
            ViewModelFactory(UserPreference.getInstance(dataStore))
        )[ForgotPasswordViewModel::class.java]
    }

    private fun setupAction() {
        binding.apply {
            resetPasswordButton.setOnClickListener {
                var isError = false

                if (TextUtils.isEmpty(emailEditText.text)) {
                    isError = true
                    emailEditText.error = getString(R.string.enter_email)
                }
                if (TextUtils.isEmpty(newPasswordEditText.text)) {
                    isError = true
                    newPasswordEditText.error = getString(R.string.new_password)
                }
                if (TextUtils.isEmpty(confirmPasswordEditText.text)) {
                    isError = true
                    confirmPasswordEditText.error = getString(R.string.confirm_password)
                }

                if (!isError) {
                    userEmail = emailEditText.text.toString()
                    viewModel.resetPassword(
                        userEmail,
                        newPasswordEditText.text.toString(),
                        confirmPasswordEditText.text.toString(),
                        object : ResponseCallback {
                            override fun getCallback(msg: String, status: Boolean) {
                                showDialogs(msg, status)
                            }
                        }
                    )

                }
            }
        }
    }

    private fun showDialogs(msg: String, status: Boolean) {
        if (status) {
            AlertDialog.Builder(this).apply {
                setTitle("Yay !")
                setMessage(msg)
                setPositiveButton(getString(R.string.next)) { _, _ ->
                    val intent = Intent(this@ForgotPasswordActivity, LoginActivity::class.java)
                    startActivity(intent)
                }
                create()
                show()
            }
        } else {
            AlertDialog.Builder(this).apply {
                setTitle("Oops")
                setMessage(msg)
                setNegativeButton(getString(R.string.repeat)) { dialog, _ -> dialog.dismiss() }
                create()
                show()
            }
        }
    }

    private fun showLoading() {
        viewModel.isLoading.observe(this) {
            binding.apply {
                when {
                    it -> progressBar.visibility = View.VISIBLE
                    else -> progressBar.visibility = View.GONE
                }
            }
        }
    }
}
